#define n 5
int quorum = n / 2 + 1;
int res[n];
int anysuccess = 0;

inline get_lock(index, num){
  atomic{
    if
      ::res[index]==0->res[index]=num;
      ::else
    fi
  }
}

inline release_lock(index){
  atomic{
    res[index]=0;
  }

}

active [5] proctype Worker(){
  int success=0;
  int locked[n];
  int i=0;
  int num = _pid;
  int p = 3;
  do
    :: p > 0 ->
	  do
	    :: anysuccess == 0 ->
	      for (i: 0 .. n-1) {
		get_lock(i,num);
		if  
		  :: res[i]==num -> locked[i]=1;success++;
		  :: else -> locked[i]=0;
		fi
	      }
	      printf("HELLO %d\n",num);
	      if
		:: success >= quorum -> anysuccess = num;printf("i`m winer %d\n",num);
		:: else -> 
		  printf("i`m looser %d\n",num);
		  for (i: 0 .. n-1) {
		    if
		      :: locked[i]==1 -> release_lock(i);success--;locked[i]=0;
		      :: else -> locked[i]==0;
		    fi
		  }
	      fi;
	    :: else ->
	      break;
	  od;
	  for (i: 0 .. n-1) {
	    if
	      :: locked[i]==1 -> release_lock(i);success--;locked[i]=0;
	      :: else -> locked[i]==0;
	    fi
	  }
	  if 
            :: anysuccess==num -> anysuccess=0;
            :: else
          fi
          p--;
    :: else -> break;
  od;
  printf("HELLO %d\n",num);
  L:(false)
}

active proctype checkFin()
{
    Worker@L
}

active proctype checkLogic()
{
    Worker@L
}

